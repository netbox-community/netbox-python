{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#netbox-python","title":"netbox-python","text":"<p>Python NetBox API Client</p>"},{"location":"#installation","title":"Installation","text":"<p>To install run <code>pip install netbox-python</code>.</p> <p>Alternatively, you can clone the repo and run <code>python setup.py install</code>.</p>"},{"location":"#usage","title":"Usage","text":"<p>To begin, import the NetBox client and instantiate it:</p> <p><pre><code>from netbox_python import NetBoxClient, Result\nnb = NetBoxClient(\n    base_url=\"http://127.0.0.1:8000/\", token=\"1dc6fa5bfcef8390dd83a261c36ed8f1551b2d6b\"\n)\n</code></pre> The first argument NetBoxClient takes is the NetBox URL. The 'token' argument is from NetBox, see the Authentication documentation in the NetBox docs for more about creating and using API Tokens.</p> <p>Now using the client you can make calls to the api.</p>"},{"location":"#basic-crud-apis","title":"Basic CRUD APIs","text":"<p>Each of these objects has the standard CRUD endpoints as follows:</p> <pre><code># 1. List (paginated)\nret = nb.dcim.sites.list(limit=3)\n\n# 2. Filtered List\nret = nb.dcim.sites.list(region_id=\"43\")\n\n# 3. All\nret = nb.dcim.sites.all()\n\n# 4. Get\nret = nb.dcim.sites.get(24)\n\n# 5. Create\nret = nb.dcim.sites.create(name=\"foo3\", slug=\"foo3\")\n\n# 6. Update\nret = nb.dcim.sites.update(26, name=\"foo2-new\", slug=\"foo2-new-slug\")\n\n# 7. Delete\nret = nb.dcim.sites.delete(37)\n</code></pre>"},{"location":"#bulk-apis","title":"Bulk APIs","text":"<p>In addition, bulk operations are available on the API's as well: <pre><code># 8. Bulk Create\ndata = [\n    {\"name\": \"foo4\", \"slug\": \"foo4\"},\n    {\"name\": \"foo5\", \"slug\": \"foo5\"},\n    {\"name\": \"foo6\", \"slug\": \"foo6\"},\n]\nret = nb.dcim.sites.create(data)\n\n# 8. Bulk Update\ndata = [\n    {\"id\": 28, \"name\": \"foo4-new\", \"slug\": \"foo4-new\"},\n    {\"id\": 29, \"name\": \"foo5-new\", \"slug\": \"foo5-new\"},\n]\nret = nb.dcim.sites.update(data)\n\n# 10. Bulk Delete\ndata = [{\"id\": 25}, {\"id\": 27}]\nret = nb.dcim.sites.delete(data)\n</code></pre></p>"},{"location":"#special-apis","title":"Special APIs","text":"<p>In addition to the standard API calls above, devices also have a special API for rendering config context: <pre><code>ret = nb.dcim.devices.render_config(107)\n</code></pre></p>"},{"location":"#endpoints","title":"Endpoints","text":"<p>The methods on the api's correspond to the NetBox REST API - the best reference to the objects that can be called is by using the browsable API on the netbox instance.  The root objects that can be called are:</p> <ul> <li>circuits</li> <li>core</li> <li>dcim</li> <li>extras</li> <li>ipam</li> <li>plugins</li> <li>status</li> <li>tenancy</li> <li>users</li> <li>virtualization</li> <li>wireless</li> </ul> <p>circuits would have 'circuit_terminations', 'circuit_types', etc... off of it.  Each of the endpoints has 'list', 'get', 'create', 'update' and 'delete' functions.</p>"},{"location":"#return-object","title":"Return Object","text":"<p>The return object from the API calls is a dictionary with two values (response and data).  data is the actual data returned from the call and response contains detailed information on the call, including the HTTP status code returned. Netbox-python is a wrapper around the python requests library. Detailed information on the response object can be found in python requests library documentation.  After making an API call you can check the status code and get the returned data as follows:</p> <pre><code>ret = nb.dcim.sites.all()\nprint(f\"status code: {ret.response.status_code}\")\nprint(ret.data)\n</code></pre>"},{"location":"CODE_OF_CONDUCT/","title":"CODE OF CONDUCT","text":""},{"location":"CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project email address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project maintainer using any of the private contact addresses. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"CONTRIBUTING/","title":"CONTRIBUTING","text":""},{"location":"CONTRIBUTING/#contributing","title":"Contributing","text":"<p>When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Please note we have a code of conduct, please follow it in all your interactions with the project.</p>"},{"location":"CONTRIBUTING/#development-environment-setup","title":"Development environment setup","text":"<p>[?] Proceed to describe how to setup local development environment. e.g:</p> <p>To set up a development environment, please follow these steps:</p> <ol> <li>Clone the repo</li> </ol> <pre><code>git clone https://github.com/netbox-community/netbox-python\n</code></pre> <ol> <li>TODO</li> </ol>"},{"location":"CONTRIBUTING/#issues-and-feature-requests","title":"Issues and feature requests","text":"<p>You've found a bug in the source code, a mistake in the documentation or maybe you'd like a new feature?Take a look at GitHub Discussions to see if it's already being discussed.  You can help us by submitting an issue on GitHub. Before you create an issue, make sure to search the issue archive -- your issue may have already been addressed!</p> <p>Please try to create bug reports that are:</p> <ul> <li>Reproducible. Include steps to reproduce the problem.</li> <li>Specific. Include as much detail as possible: which version, what environment, etc.</li> <li>Unique. Do not duplicate existing opened issues.</li> <li>Scoped to a Single Bug. One bug per report.</li> </ul> <p>Even better: Submit a pull request with a fix or new feature!</p>"},{"location":"CONTRIBUTING/#how-to-submit-a-pull-request","title":"How to submit a Pull Request","text":"<ol> <li>Search our repository for open or closed    Pull Requests    that relate to your submission. You don't want to duplicate effort.</li> <li>Fork the project</li> <li>Create your feature branch (<code>git checkout -b feat/amazing_feature</code>)</li> <li>Commit your changes (<code>git commit -m 'feat: add amazing_feature'</code>) NetBox Python uses conventional commits, so please follow the specification in your commit messages.</li> <li>Push to the branch (<code>git push origin feat/amazing_feature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"modules/","title":"Modules","text":"<p>Top-level package for NetBox Python.</p>"},{"location":"modules/#netbox_python.exceptions","title":"<code>exceptions</code>","text":""},{"location":"modules/#netbox_python.exceptions.NetBoxException","title":"<code> NetBoxException            (Exception)         </code>","text":"<p>Error from NetBox REST API.</p> Source code in <code>netbox_python/exceptions.py</code> <pre><code>class NetBoxException(Exception):\n    \"\"\"\n    Error from NetBox REST API.\n    \"\"\"\n</code></pre>"},{"location":"modules/#netbox_python.rest","title":"<code>rest</code>","text":""},{"location":"modules/#netbox_python.rest.Result","title":"<code> Result        </code>","text":"Source code in <code>netbox_python/rest.py</code> <pre><code>class Result:\n    def __init__(\n        self,\n        pagination: dict = None,\n        params: dict = None,\n        response: requests.Response = None,\n        data: List[Dict] = None,\n    ):\n        \"\"\"\n        Result returned from low-level RestAdapter\n        :param pagination: {'count': int, 'next': str, 'previous': str} for paginating list returns\n        :param params: dict of parmas sent in the query\n        :param response: requests.response object (status, headers) from API call\n        :param data: Python List of Dictionaries (or maybe just a single Dictionary on error)\n        \"\"\"\n        self.pagination = pagination\n        self.params = params\n        self.response = response\n        self.data = data if data else []\n</code></pre>"},{"location":"modules/#netbox_python.rest.Result.__init__","title":"<code>__init__(self, pagination=None, params=None, response=None, data=None)</code>  <code>special</code>","text":"<p>Result returned from low-level RestAdapter :param pagination: {'count': int, 'next': str, 'previous': str} for paginating list returns :param params: dict of parmas sent in the query :param response: requests.response object (status, headers) from API call :param data: Python List of Dictionaries (or maybe just a single Dictionary on error)</p> Source code in <code>netbox_python/rest.py</code> <pre><code>def __init__(\n    self,\n    pagination: dict = None,\n    params: dict = None,\n    response: requests.Response = None,\n    data: List[Dict] = None,\n):\n    \"\"\"\n    Result returned from low-level RestAdapter\n    :param pagination: {'count': int, 'next': str, 'previous': str} for paginating list returns\n    :param params: dict of parmas sent in the query\n    :param response: requests.response object (status, headers) from API call\n    :param data: Python List of Dictionaries (or maybe just a single Dictionary on error)\n    \"\"\"\n    self.pagination = pagination\n    self.params = params\n    self.response = response\n    self.data = data if data else []\n</code></pre>"}]}